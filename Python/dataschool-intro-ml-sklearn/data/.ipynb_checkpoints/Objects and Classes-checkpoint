{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "51df6ebd-c06b-44ad-a76a-62a05fbad963",
   "metadata": {},
   "source": [
    "## Built-in Types in Python\n",
    "\n",
    "- Python has lots of data types\n",
    "\n",
    "- Types:\n",
    "\n",
    "    - `int`: 1, 2, 3\n",
    "    \n",
    "    - `float`: 1.2. 0.62\n",
    "    \n",
    "    - `String`: 'abc', 'xyz'\n",
    "    \n",
    "    - `List`: [1, 2, 3]\n",
    "    \n",
    "    - `Dictionary`: {'Key1': 100, 'Key2': 500}\n",
    "    \n",
    "    - `Bool`: True, False\n",
    "    \n",
    " - Each is an **`Object`**\n",
    " \n",
    " - Every `object` has\n",
    " \n",
    "     - `type`\n",
    "     \n",
    "     - an internal data representation (a blueprint)\n",
    "     \n",
    "     - a set of procedures for interecting withe object (`methods`)\n",
    "     \n",
    " - An `object` is an `instance` of a particular `type`\n",
    " \n",
    " - You can find the type of object by using the command `type()`\n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7b406deb-3a8c-45aa-8206-7ceab6f52444",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "list"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type([1, 2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "52b0f2a2-4c95-4edf-9632-162d848c0368",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "int"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8c1f259c-e19f-45a3-97df-20825d986931",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "float"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(3.14)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "805eed49-d8f1-41e6-ac1b-00083474837d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "str"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(\"I love Python!\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "94916784-380e-4fb9-9b7e-edebc9f92464",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type({\"name\": \"Young\", \"age\": 18})"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0dec67f4-e4da-4939-9d24-e309a86e549d",
   "metadata": {},
   "source": [
    "## Methods\n",
    "\n",
    "- A class or type's methods are functions that every instance of that class or type provides\n",
    "\n",
    "- It's how you interect with the data in an object\n",
    "\n",
    "- Sorting is an example of a method that interacts withe data in the object\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "d0d00002-f3fe-46dd-ba65-ffe463d3b85a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[8, 1, 3, 9, 0]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ratings = [8, 1, 3, 9, 0]\n",
    "ratings"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "eb9efdae-d70d-49c6-b712-639231308773",
   "metadata": {},
   "outputs": [],
   "source": [
    "# sort method\n",
    "ratings.sort() # changes the object "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "3846438c-7cfb-4ec7-856a-043843f8d347",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0, 1, 3, 8, 9]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ratings"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8facd183-b869-4a22-8699-4aa6d6172821",
   "metadata": {},
   "source": [
    "## Creating your own classes\n",
    "\n",
    "<img src=\"images/class1.pmg\" alt=\"Flowers in Chania\">\n",
    "\n",
    "### Circle\n",
    "\n",
    "We need the `radius` obviously. Suppose we also need `color`\n",
    "\n",
    "**Data Attributes:** `radius`;`color`\n",
    "\n",
    "To create "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "159921be-cd64-4bbb-9ec6-cb8be0a9bb82",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "34fc6030-532e-4609-88f3-1048a5f07dc9",
   "metadata": {},
   "source": [
    "### Rectangle\n",
    "\n",
    "**Data Attributes**: `height`; `width`; `color`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "dccb64e7-e8cf-43a1-8535-8ed1b81d8d67",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-12-7773cef7719f>, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m\"<ipython-input-12-7773cef7719f>\"\u001b[1;36m, line \u001b[1;32m1\u001b[0m\n\u001b[1;33m    <img src=\"images/class1.png\" alt=\"Flowers in Chania\">\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "<img src=\"images/class1.png\" alt=\"Flowers in Chania\">"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fe9f3c1e-5b03-4422-b53f-71851f36298c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
